Assignment - Searching

Q1. Given an array. FInd the number X in the array. If the element is present, return the index of the element,
else print “Element not found in array”. Input the size of array, array from user and the element X from user.
Use Linear Search to find the element.

Ans:-import java.util.Scanner;

public class Searching{
    public static void main(String[] args) {
        System.out.println("Enter the number of Element in Array:");
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println("Enter the Target Element:");
        int x=sc.nextInt();
        int result=-1;
        for(int i=0;i<n;i++){
            if(arr[i]==x){
               result=i;
               break;
            }   
        }
        if(result==-1)
        System.out.println("Element is not Found.");
        else
        System.out.println("Element is found at position:"+result);
        sc.close();
    }
}

output:
Enter the number of Element in Array:
6
20
60
10
90
70
40
Enter the Target Element:
40
Element is found at position:5

Q2. Given an array and an integer “target”, return the last occurrence of “target” in the array. If the target is
not present return -1.
Input 1: arr = [1 1 1 2 3 4 4 5 6 6 6 6] , target = 4
Output 1: 6
Input 2: arr = [2 2 2 6 6 18 29 30 30 30] , target = 15
Output 2: -1

Ans:import java.util.Scanner;

public class Searching{
    public static void main(String[] args) {
        System.out.println("Enter the number of Element in Array:");
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println("Enter the Target Element:");
        int x=sc.nextInt();
        int result=-1;
        int first=0,last=n-1;
        while(first<=last){
            int mid=first+(last-first)/2;
            if(arr[mid]==x){
                result=mid;
                first=mid+1;
            }
            else if(arr[mid]<x){
                first=mid+1;
            }
            else{
                last=mid-1;                
            }
        }
        if(result==-1)
        System.out.println("Element is not Found.");
        else
        System.out.println("Element is found at position:"+result);
        sc.close();
    }
}

output:
Enter the number of Element in Array:
6
2
4
6  
6
6
8
Enter the Target Element:
6
Element is found at position:4

Q3. Given a sorted binary array, efficiently count the total number of 1’s in it.
Input 1: arr = [0 0 0 0 1 1 1 1 1 1]
Output 1: 6
Input 2: arr = [ 0 0 0 0 0 1 1]
Output 2: 2

Ans:import java.util.Scanner;

public class Searching{
    public static void main(String[] args) {
        System.out.println("Enter the number of Element in Array:");
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int result=-1;
        int first=0,last=n-1;
        while(first<=last){
            int mid=first+(last-first)/2;
            if(arr[mid]==1){
                result=mid;
                last=mid-1;
            }
            else if(arr[mid]<1){
                first=mid+1;
            }
            else{
                last=mid-1;
            }
        }
        if(result==-1)
        result=0;
        else
        result=n-result;
        System.out.println("Number of ones occuring "+result+" times");
        sc.close();
    }
}

output:
Enter the number of Element in Array:
6
0 0 0 0 0 1
Number of ones occuring 1 times

Q4. Given a sorted integer array containing duplicates, count occurrences of a given number. If the element
is not found in the array, report that as well.
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 5
Output: Target 5 occurs 3 times
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 6
Output: Target 6 occurs 2 times

Ans: import java.util.Scanner;

public class Searching{
    public static void main(String[] args) {
        System.out.println("Enter the number of Element in Array:");
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println("Enter the Target Element:");
        int x=sc.nextInt();
        int result=-1,result2=-1;
        int first=0,last=n-1;
        while(first<=last){
            int mid=first+(last-first)/2;
            if(arr[mid]==x){
                result=mid;
                last=mid-1;
            }
            else if(arr[mid]<x){
                first=mid+1;
            }
            else{
                last=mid-1;
            }
        }
        first=0;
        last=n-1;
        while(first<=last){
            int mid=first+(last-first)/2;
            if(arr[mid]==x){
                result2=mid;
                first=mid+1;
            }
            else if(arr[mid]<x){
                first=mid+1;
            }
            else{
                last=mid-1;
            }
        }
        if(result==-1 && result==-1)
            result=0;
        else
            result=result2-result+1;
        System.out.println("Number of "+x+" occuring "+result+" times");
        sc.close();
    }
}
output: 
6
0 0 0 1 2 2
Enter the Target Element:
6
Number of 6 occuring 0 times

Q5: Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer
with itself.
Example 1:
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
Example 2:
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.

Ans:import java.util.Scanner;

public class search{
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number :");
        int n=sc.nextInt();
        int result=0;
        int first=0,last=n;
        while(first<=last){
            int mid=first+(last-first)/2;
            int ans=mid*mid;
            if(n==ans){
                result=mid;
                break;
            }
            else if(ans<n){
                result=mid;
                first=mid+1;
            }
            else{
                last=mid-1;
            }
        }
        System.out.println(result);
        sc.close();
    }
}
 output:Enter the number :
69
8









Assignment-Sorting
public class sorting {

    // Q1. Write a program to sort an array in descending order using bubble sort.
    // Q4. Find out how many pass would be required to sort the following array in decreasing order using bubble sort.

    public static void bubbleSort(int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            ans++;
            boolean swapped = false;
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] < arr[j + 1]) {
                    ans++;
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            if (swapped == false) {
                break;
            }
        }
        // Solution of Question 4
        System.out.println(ans);
    }

    // Q2. WAP to sort an array in descending order using selection sort
    // Q5. Find out the number of iterations to sort the array in descending order using selection sort.

    public static void selectionSort(int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            ans++;
            int maxIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[maxIndex] < arr[j]) {
                    maxIndex = j;
                }
            }
            if (maxIndex != i) {
                int temp = arr[i];
                arr[i] = arr[maxIndex];
                arr[maxIndex] = temp;
            }
        }
        // Solution of Question 5
        System.out.println(ans);
    }

    // Q3. WAP to sort an array in decreasing order using insertion sort
    public static void insertionSort(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            int j = i;
            while (j > 0 && arr[j] > arr[j - 1]) {
                int temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                j--;
            }
        }
    }

    public static void main(String[] args) {
        int arr[] = { 3, 5, 1, 6, 0 };
        // bubbleSort(arr);
        // selectionSort(arr);
        insertionSort(arr);
        System.out.println(Arrays.toString(arr));

    }

}


output: 
[6, 5, 3, 1, 0] // Same for answer-1,2,3
8 //answer - 4
4 //answer - 5











Assignment - Bit manupualation

Problem 1: given a number, print its binary representation. [easy]
Input 1: number = 5
Output 1: 101
Ans public class bitManipulation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number: ");
        int num = sc.nextInt();    

        int ans = 0;
        int base = 1;
        while (num > 0) {
            int rem = num % 2;
            ans = ans + rem * base;
            num = num / 2;
            base = base * 10;
        }
        System.out.println(ans);
      }
    }

output : Enter the number: 10
         1010

Problem 2: given a number ‘n’, predict whether it is a power of two or not. [medium]
Input 1: n = 15
Output 1: False
Input 2: n = 32
Output 2: True
Ans:
public class bitManipulation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number: ");
        int num = sc.nextInt();    

        boolean ans = true;
        while (num > 0) {
            if (num % 2 != 0) {
                ans = false;
                break;
            }
            num /= 2;
            if (num == 1)
                break;
        }
        System.out.println(ans);
    }
}
output:
Enter the number: 5 
false

Q3. Given a number. Using bit manipulation, check whether it is odd or even.
Input 8, Even
3, False
Ans: public class bm {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number: ");
        int num = sc.nextInt();
        if ((num ^ 1) == num + 1) {
            System.out.println("Even");
        } else {
            System.out.println("false");
        }
        sc.close();
    }
}
output:
Enter the number: 5 
false


Q4. Given a number, count the number of set bits in that number without using an extra space.
Note : bit ‘1’ is also known as set bit.
Ans:
public class bm {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number: ");
        int n = sc.nextInt();
        int count = 0;
        while (n > 0) {
            count += n & 1;
            n >>= 1;
        }
        System.out.println(count);
        sc.close();
    }
}
output:
Enter the number: 25
3

Q5. Given an integer array, duplicates are present in it in a way that all duplicates appear an even
number of times except one which appears an odd number of times. Find that odd appearing
element in linear time and without using any extra memory.
For example,
Input : arr[] = [4, 3, 6, 2, 6, 4, 2, 3, 4, 3, 3]
Output : The odd occurring element is 4.
Ans:
public class que {
    public static void main(String[] args) {
        int ans = 0;
        int[] arr = { 4, 3, 6, 2, 6, 4, 2, 3, 4, 3, 3 };
        for (int i = 0; i < arr.length; i++) {
            ans = ans ^ arr[i];
        }
        System.out.println("The odd occurring element is "+ans);
    }
}
output: The odd occurring element is 4

