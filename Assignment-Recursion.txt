Assignment-Recursion

Q1 : Given an integer, find out the sum of its digits using recursion.
Input: n= 1234
Output: 10
Explanation: 1+2+3+4=10

Ans:
import java.util.Scanner;
public class assignment {
	public static int find(int num) {
		if(num<10) {
			return num;
		}
		int num2=num%10;
		num=num/10;
		int ans=num2+find(num);
		return ans;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number:");
		int num=sc.nextInt();
		int ans=find(num);
		System.out.println("Answer is: "+ans);
	}
}


Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs.
That means if n = 5 then you have to return 1-2+3-4+5 = 3 as your answer.
Constraints : 0<=n<=1e6
Input1 : n = 10
Output 1 : -5
Explanation : 1-2+3-4+5-6+7-8+9-10 = -5
Input 2 : n = 5
Output 2 : 3

Ans:
import java.util.Scanner;

public class assign2 {
	public static int solve(int num) {
		if(num<=1) {
			return num;
		}
		
		if(num%2==0) {
			return -num+solve(--num);
		}
		else {
			return num+solve(--num);		
		}
	}
	public static void main(String[] args) {
		System.out.println("Enter the number:");
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
		int ans=solve(num);
		System.out.println("Answer is: "+ans);
	}

}



Q3: Print the max value of the array [ 13, 1, -3, 22, 5].

Ans: 
public class assign3 {
	public static int solve(int []arr,int n,int maxval) {
    	if(n==arr.length) 
    	return maxval;
    	
    	if(arr[n]>maxval) {
    		maxval=arr[n];	
    	}
    	return solve(arr,n+1,maxval);
    }
	public static void main(String[] args) {
		int [] arr= {13,1,-3,22,5};
		int max=Integer.MIN_VALUE;
		int ans=solve(arr,0,max);
	    System.out.println("Maximum value:"+ans);
	}
}


Q4 : Find the sum of the values of the array [92, 23, 15, -20, 10].

Ans:
public class assign4 {
	public static int sum(int []arr,int i) {
		if(i==arr.length)
			return 0;
		return arr[i]+sum(arr,++i);
	}

	public static void main(String[] args) {
		int []arr= {92,23,15,-20,10};
		int ans=sum(arr,0);
        System.out.println("Sum of array is:"+ans);
    }
}

Q5. Given a number n. Print if it is an armstrong number or not. An armstrong number is a number if the sum
of every digit in that number raised to the power of total digits in that number is equal to the number.
Example : 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 hence 153 is an armstrong number. (Easy)
Input1 : 153
Output1 : Yes
Input 2 : 134
Output2 : No

Ans:
import java.util.*;

public class assign5 {
    public static int solve(int num) {
    	if(num<10) {
    		return 1;
    	}
    	return 1+solve(num/10); 
    }
    public static int solve2(int num ,int length) {
    	if(num<=0) {
    		return 0;
    	}
    	int n=num%10;
    	num=num/10;
    	int ans=1;
    	for(int i=0;i<length;i++) {
    		ans *=n;
    	}
    	return ans+solve2(num,length);
    }
	public static void main(String[] args) {
		System.out.println("Enter the number:");
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
        int length=solve(num);
        int ans=solve2(num,length);
        if(num==ans) {
        	System.out.println("YES");
        }
        else {
        	System.out.println("NO");
        }
	}

}
